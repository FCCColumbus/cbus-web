import { render } from "@testing-library/react";

import App from "../App";

jest.mock('../components/Header', () => () => <div>HeaderMock</div>);
jest.mock('../components/Splash', () => () => <div>SplashMock</div>);
jest.mock('../components/About', () => () => <div>AboutMock</div>);
jest.mock('../components/Events', () => () => <div>EventsMock</div>);
jest.mock('../components/Members', () => () => <div>MembersMock</div>);
jest.mock('../components/Footer', () => () => <div>FooterMock</div>);

describe("App", () => {
  test("renders App components in order", () => {
    // Capture the raw output of the render function.
    // It returns a data type called "RenderResult", so that's what we'll name the variable.
    const renderResult = render(<App />);

    // Isolate the thing that we want to test.
    // I usually name this variable "actual" as it represents what our code is actually doing,
    // and is consistent with the "actual-expected" terminology used in unit testing.
    // In this case, our RenderResult object has a property called "container" and we want to test
    // the innerHTML of that container.
    // In the context of React/JSX, the innerHTML is what's generated by the component's return statement.
    const actual = renderResult.container.innerHTML;

    /*
    Console logging `actual` would log the following:

    <div class="App"><div>HeaderMock</div><div>SplashMock</div><div>AboutMock</div><div>EventsMock</div><img src="/divider.jpg" alt="code on a screen. mostly css"><div>MembersMock</div><div>FooterMock</div></div>
    */

    // The assertion below can be improved. I'll address this in the next commit
    // and will leave the existing comment and assertion in place for now.

    // at this point we can just do a string match on the raw outerHTML of the app element
    // we do this by using a regular expression (RegEx).  The {1,1} notation means "one and only one"
    // and the [\s\S]* ignores any strings in between
    // note the order of the component mocks.  when the order is changed in App.js, this test will fail (as it should)
    expect(actual).toMatch(/HeaderMock{1,1}[\s\S]*SplashMock{1,1}[\s\S]*AboutMock{1,1}[\s\S]*EventsMock{1,1}[\s\S]*MembersMock{1,1}[\s\S]*FooterMock{1,1}/s);
  });
});
